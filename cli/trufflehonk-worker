#!/usr/bin/env python3
import os
import uuid
import sys

from datetime import datetime

import requests

from trufflehonk import queues  # TODO strangle
from trufflehonk.jobs import trufflehog, pydriller
from trufflehonk.utils import git, s3_files


# "temporary"
class MESSAGE_KINDS:
    TRUFFLEHOG = 'git-regex'
    PYDRILLER = 'email'


def publish_nsq(nsq_http_host, topic, kind, message, meta=None):
    '''man please fix this

    :kind what kind of finding (email, git-regex)
    '''
    # whatever it doesn't matter
    url = f'http://{nsq_http_host}/pub'
    now = round(datetime.utcnow().timestamp() * 1000)
    requests.post(
        url,
        params={'topic': topic},
        json={
            'id': str(uuid.uuid4()),
            'timestamp': now,  # ms ts
            'kind': kind,
            'message': message,
            **({'meta': meta} if meta else {})
        }
    )


def publish_nsq_bulk(nsq_http_host, topic, kind, messages, meta=None):
    for message in messages:
        publish_nsq(nsq_http_host, topic, kind, message, meta)


def honk_git(repo_url, repo_path):
    secrets = trufflehog.find_secrets(repo_url, repo_path, args.rules_file)
    authors = pydriller.find_authors(repo_path)
    return secrets, authors


def honk_git_cmd(args):
    topic = args.nsq_topic
    nsq_http_host = args.nsq_http_host

    for repo_url in queues.SqsQueue(args.sqs_queue_url):
        print(f'processing {repo_url}', file=sys.stderr)

        def _publish_bulk(kind, data):
            publish_nsq_bulk(
                nsq_http_host=nsq_http_host,
                topic=topic,
                kind=kind,
                messages=data,
                meta=git.repo_url_meta(repo_url)
            )

        with s3_files.S3GitRepo(repo_url,
                                update=(not args.skip_update),
                                bucket=args.s3_files_bucket,
                                path=git.to_gopath(repo_url),
                                restore=(not args.skip_restore),
                                save=(not args.skip_save)) as repo_path:
            secrets, authors = honk_git(repo_url, repo_path)
            _publish_bulk(MESSAGE_KINDS.TRUFFLEHOG, secrets)
            _publish_bulk(MESSAGE_KINDS.PYDRILLER, authors)


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser('trufflehonk-worker')
    parser.set_defaults(func=None)

    subparsers = parser.add_subparsers(title='subcommands')

    honk_subparser = subparsers.add_parser('start')
    honk_subparser.add_argument('--rules-file', type=str, default=None)
    honk_subparser.add_argument(
        '--sqs-queue-url',
        default=str(os.getenv('TRUFFLEHONK_QUEUE_SQS_URL')))
    honk_subparser.add_argument(
        '--s3-files-bucket',
        default=str(os.getenv('TRUFFLEHONK_S3_FILES_BUCKET_NAME')))
    honk_subparser.add_argument(
        '--nsq-http-host',
        default=os.getenv('TRUFFLEHONK_NSQ_HTTP_HOST', 'localhost:4151'))
    honk_subparser.add_argument(
        '--nsq-topic',
        default=os.getenv('TRUFFLEHONK_NSQ_TOPIC', 'recon-findings'))
    honk_subparser.add_argument(
        '--skip-restore',
        action='store_true',
        default=False,
        help='skip restoring from s3')
    honk_subparser.add_argument(
        '--skip-update',
        action='store_true',
        default=False,
        help='skip git pull')
    honk_subparser.add_argument(
        '--skip-save',
        action='store_true',
        default=False,
        help='skip saving to s3')
    honk_subparser.add_argument(
        '--skip-publish',
        action='store_true',
        default=False,
        help='skip publish to nsq')
    honk_subparser.set_defaults(func=honk_git_cmd)

    args = parser.parse_args()

    if args.func:
        args.func(args)
    else:
        parser.print_usage()
